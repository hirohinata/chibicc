ステップ12: 制御構文を足す

if (A) B else Cは次のようなアセンブリにコンパイルします。

  Aをコンパイルしたコード // スタックトップに結果が入っているはず
  pop rax
  cmp rax, 0
  je  .LelseXXX
  Bをコンパイルしたコード
  jmp .LendXXX
.LelseXXX
  Cをコンパイルしたコード
.LendXXX


	.LelseXXX, .LendXXXにコロン必須



for (A; B; C) Dは次のようにコンパイルします。

  Aをコンパイルしたコード
.LbeginXXX:
  Bをコンパイルしたコード
  pop rax
  cmp rax, 0
  je  .LendXXX
  Dをコンパイルしたコード
  Cをコンパイルしたコード
  jmp .LbeginXXX
.LendXXX:


	Aの結果やCの結果をスタックから破棄必要



ステップ14: 関数の呼び出しに対応する


	結合結果を知るためにobjdumpは重要

	引数に利用するレジスタは「付録1：x86-64命令セット チートシート」を参考にするとハマる可能性あり。
	呼び出し規約によっては使うレジスタが異なる。
	https://learn.microsoft.com/en-us/cpp/build/x64-software-conventions?view=msvc-170

	rspのアラインメント調整、push/popでrspは変動していることに注意
	rspを直に編集しているのがプロローグだけと言って、そこでアライン調整してもダメ

	現状、rsp何故か16の倍数にそろえてもそこそこの確率で異常値が返る。原因不明。